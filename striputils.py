# -*- coding: utf-8 -*-
"""strip_test_files.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UC0LkiGRGwQ8xMgG-1ScR-zdN9Q3rtEF
"""

import pandas as pd



def stripFile(csv,year):
    
    # df=pd.read_csv(r'more_match_player_feature_matches (1) (1).csv',index_col=0)
    df = csv
    df.shape

    pd.set_option('display.max_columns', None)
    df['start_time'] = pd.to_datetime(df['start_time'])
    # Assuming your DataFrame is named df
    # Replace 'team1_class_id' and 'team2_class_id' with the actual column names in your DataFrame

    filtered_df = df[(df['team1_class_id'] == 6) & (df['team2_class_id'] == 6)]

    # Now, filtered_df contains only the rows where both 'team1_class_id' and 'team2_class_id' are equal to 6
    # Assuming your DataFrame is named df
    # Replace 'country' with the actual column name in your DataFrame

    filtered_df = filtered_df[filtered_df['country_abbreviation'] == 'IND']

    # Now, filtered_df contains only the rows where 'country' is equal to 'India'
    # Create a mask to filter rows where the year is 2022
    # List of years you want to filter
    years_to_filter = [2018,2019,2021,2022,2023]

    # Create a mask to filter rows where the year is in the list of years_to_filter
    mask_years = filtered_df['start_time'].dt.year.isin(years_to_filter)

    # Apply the mask to the DataFrame
    # filtered_df = filtered_df[mask_years]

    filtered_df['team1_abbreviation'] = filtered_df['team1_abbreviation'].replace('KXIP', 'PBKS')
    filtered_df['team2_abbreviation'] = filtered_df['team2_abbreviation'].replace('KXIP', 'PBKS')

    filtered_df.columns

    filtered_df = filtered_df.reset_index()

    # Now you can check the columns again
    print(filtered_df.columns)

    filtered_df.tail()

    result_df = filtered_df

    result_df.shape

    # Calculate average strike rate and average balls faced
    avg_strike_rate = result_df.groupby('name')['strike_rate'].mean().reset_index(name='Avg_Strike_Rate')
    avg_balls_faced = result_df.groupby('name')['balls_faced'].mean().reset_index(name='Avg_Balls_Faced')

    # Merge the averages back into the original DataFrame
    result_df = pd.merge(result_df, avg_strike_rate, on='name')
    result_df = pd.merge(result_df, avg_balls_faced, on='name')

    # Display the updated DataFrame
    print(result_df.shape)

    result_df.tail()

    result_df.head()

    # Calculate total fifties and total hundreds
    total_fifties_mean = result_df.groupby('name')['fifty_plus'].mean().reset_index(name='Total_Fifties_Mean')
    total_hundreds_mean = result_df.groupby('name')['hundreds'].mean().reset_index(name='Total_Hundreds_Mean')

    # Merge the totals back into the original DataFrame
    result_df = pd.merge(result_df, total_fifties_mean, on='name')
    result_df = pd.merge(result_df, total_hundreds_mean, on='name')

    # Calculate total fifties and total hundreds
    total_fifties = result_df.groupby('name')['fifty_plus'].sum().reset_index(name='Total_Fifties')
    total_hundreds = result_df.groupby('name')['hundreds'].sum().reset_index(name='Total_Hundreds')

    # Merge the totals back into the original DataFrame
    result_df = pd.merge(result_df, total_fifties, on='name')
    result_df = pd.merge(result_df, total_hundreds, on='name')

    # Calculate total fifties and total hundreds
    total_fours_sum = result_df.groupby('name')['fours'].sum().reset_index(name='Total_Fours_sum')
    total_sixes_sum = result_df.groupby('name')['sixes'].sum().reset_index(name='Total_Sixes_sum')

    # Merge the totals back into the original DataFrame
    result_df = pd.merge(result_df, total_fours_sum, on='name')
    result_df = pd.merge(result_df, total_sixes_sum, on='name')

    # Calculate total fifties and total hundreds
    total_fours = result_df.groupby('name')['fours'].mean().reset_index(name='Total_Fours_mean')
    total_sixes = result_df.groupby('name')['sixes'].mean().reset_index(name='Total_Sixes_mean')

    # Merge the totals back into the original DataFrame
    result_df = pd.merge(result_df, total_fours, on='name')
    result_df = pd.merge(result_df, total_sixes, on='name')

    total_runs = result_df.groupby('name')['runs'].sum().reset_index(name='Total_runs')

    # Merge the totals back into the original DataFrame
    result_df = pd.merge(result_df, total_runs, on='name')

    total_runs_mean = result_df.groupby('name')['runs'].mean().reset_index(name='Total_runs_mean')

    # Merge the totals back into the original DataFrame
    result_df = pd.merge(result_df, total_runs_mean, on='name')

    result_df.shape

    result_df.tail()

    from datetime import datetime
    import numpy as np
    # Assuming 'date_of_birth' is the column with date of birth
    result_df['date_of_birth'] = pd.to_datetime(result_df['date_of_birth'], errors='coerce')

    # Calculate age based on current date
    current_date = datetime.now()
    result_df['age'] = np.floor((current_date - result_df['date_of_birth']).dt.days / 365.25)

    # Drop the original 'date_of_birth' column if needed
    result_df.drop(columns=['date_of_birth'], inplace=True)

    # Display the resulting DataFrame
    print(result_df.shape)

    result_df.fillna(0,inplace=True)

    result_df.head()

    df_fil = pd.DataFrame(result_df)

    df_fil.columns

    # For testing purpose
    columns_to_keep =['cricinfo_id','start_time','away_team_id', 'floodlit_name',
        'home_team_id', 'team1_abbreviation', 'team2_abbreviation',
        'batting_position','innings_number',
        'balls_faced','runs','fours','sixes','age',
        'name', 'position','ground_name','avgtemp_c','maxwind_kph','condition',
        'Avg_Balls_Faced','Avg_Strike_Rate','Total_Fifties_Mean','Total_Hundreds_Mean',
        'Total_Fifties','Total_Hundreds','Total_Fours_sum','Total_Sixes_sum','Total_Fours_mean','Total_Sixes_mean','Total_runs','Total_runs_mean']
    # Keep only the specified columns in the DataFrame
    df_fil = result_df[columns_to_keep]

    # Display the resulting DataFrame
    print(df_fil.shape)

    df_fil.head()

    object_columns = df_fil.select_dtypes(include=['object']).columns

    # Now, object_columns contains the names of columns that have object data type
    print(object_columns)

    testing_df = df_fil

    testing_df['start_time'] = pd.to_datetime(testing_df['start_time'])

    # Separate the DataFrame based on years
    df_returned = testing_df[testing_df['start_time'].dt.year == year]
    return df_returned